---
categories: Life
---
<link rel="stylesheet" href="http://yastatic.net/highlightjs/8.2/styles/xcode.min.css">
<script src="http://yastatic.net/highlightjs/8.2/highlight.min.js"></script>
<script>hljs.initHighlightingOnLoad();</script>

[![Carthage](http://ww1.sinaimg.cn/large/74311666jw1ex1whba3zjj20bo0243yp.jpg)](https://github.com/Carthage/Carthage)

[![Carthage compatible](https://img.shields.io/badge/Carthage-compatible-4BC51D.svg?style=flat)](https://github.com/Carthage/Carthage)

##Carthage

### 1.概述

Carthage is intended to be the simplest way to add frameworks to your Cocoa application.

The basic workflow looks something like this:

1. Create a Cartfile that lists the frameworks you’d like to use in your project.
2. Run Carthage, which fetches and builds each framework you’ve listed.
3. Drag the built .framework binaries into your application’s Xcode project.

Carthage builds your dependencies and provides you with binary frameworks, but you retain full control over your project structure and setup. Carthage does not automatically modify your project files or your build settings.





### 2.Carthage和CocoaPods的区别
CocoaPods is a long-standing dependency manager for Cocoa. So why was Carthage created?

Firstly, CocoaPods (by default) automatically creates and updates an Xcode workspace for your application and all dependencies. Carthage builds framework binaries using xcodebuild, but leaves the responsibility of integrating them up to the user. CocoaPods’ approach is easier to use, while Carthage’s is flexible and unintrusive.

The goal of CocoaPods is listed in its README as follows:

- to improve discoverability of, and engagement in, third party open-source libraries, by creating a more centralized ecosystem.

By contrast, Carthage has been created as a decentralized dependency manager. There is no central list of projects, which reduces maintenance work and avoids any central point of failure. However, project discovery is more difficult—users must resort to GitHub’s `Trending` pages or similar.

CocoaPods projects must also have what’s known as a podspec file, which includes metadata about the project and specifies how it should be built. Carthage uses xcodebuild to build dependencies, instead of integrating them into a single workspace, it doesn’t have a similar specification file but your dependencies must include their own Xcode project that describes how to build their products.

Ultimately, we created Carthage because we wanted the simplest tool possible—a dependency manager that gets the job done without taking over the responsibility of Xcode, and without creating extra work for framework authors. CocoaPods offers many amazing features that Carthage will never have, at the expense of additional complexity.


### 3.Carthage的安装
To install the carthage tool on your system, please download and run the Carthage.pkg file for the latest [release](https://github.com/Carthage/Carthage/releases), then follow the on-screen instructions.

Alternately, you can use [Homebrew](http://brew.sh) and install the `carthage` tool on your system simply by running brew update and brew install carthage.

If you’d like to run the latest development version (which may be highly unstable or incompatible), simply clone the master branch of the repository, then run make install.


### 4.添加框架到应用
Once you have Carthage installed, you can begin adding frameworks to your project. Note that Carthage only supports dynamic frameworks, which are only available on iOS 8 or later (or any version of OS X).

####（1）Getting started
#####If you're building for OS X

1. Create a Cartfile that lists the frameworks you’d like to use in your project.
2. Run carthage update. This will fetch dependencies into a Carthage/Checkouts folder and build each one.
3. On your application targets’ “General” settings tab, in the “Embedded Binaries” section, drag and drop each framework you want to use from the Carthage/Build folder on disk.

#####If you're building for iOS

1. Create a Cartfile that lists the frameworks you’d like to use in your project.
	
		样式：
		
		#Require version 2.3.1 or later
		github "ReactiveCocoa/ReactiveCocoa" >= 2.3.1

		# Require version 1.x
		github "Mantle/Mantle" ~> 1.0    # (1.0 or later, but less than 2.0)

		# Require exactly version 0.4.1
		github "jspahrsummers/libextobjc" == 0.4.1

		# Use the latest version
		github "jspahrsummers/xcconfigs"

		# Use the branch
		github "jspahrsummers/xcconfigs" "branch"

		# Use a project from GitHub Enterprise
		github "https://enterprise.local/ghe/desktop/git-error-translations"

		# Use a project from any arbitrary server, on the "development" branch
		git "https://enterprise.local/desktop/git-error-translations2.git" "development"

		# Use a local project
		git "file:///directory/to/project" "branch"
		
2. Run carthage update. This will fetch dependencies into a Carthage/Checkouts folder, then build each one.

	之后的工程样式
	
	[![Carthage](http://ww4.sinaimg.cn/large/74311666jw1ex1yhssuroj20ft03q0t9.jpg)]
	

3. On your application targets’ “General” settings tab, in the “Linked Frameworks and Libraries” section, drag and drop each framework you want to use from the Carthage/Build folder on disk.
4. On your application targets’ “Build Phases” settings tab, click the “+” icon and choose “New Run Script Phase”. Create a Run Script with the following contents:

`/usr/local/bin/carthage copy-frameworks`

and add the paths to the frameworks you want to use under “Input Files”, e.g.:

`$(SRCROOT)/Carthage/Build/iOS/Box.framework
$(SRCROOT)/Carthage/Build/iOS/Result.framework
$(SRCROOT)/Carthage/Build/iOS/ReactiveCocoa.framework`

This script works around an App Store submission bug triggered by universal binaries.


太多了，不想翻译了，下次用到在继续写...




	






























